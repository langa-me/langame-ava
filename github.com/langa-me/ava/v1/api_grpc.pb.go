// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConversationStarterServiceClient is the client API for ConversationStarterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConversationStarterServiceClient interface {
	GetConversationStarter(ctx context.Context, in *ConversationStarterRequest, opts ...grpc.CallOption) (*ConversationStarterResponse, error)
}

type conversationStarterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConversationStarterServiceClient(cc grpc.ClientConnInterface) ConversationStarterServiceClient {
	return &conversationStarterServiceClient{cc}
}

func (c *conversationStarterServiceClient) GetConversationStarter(ctx context.Context, in *ConversationStarterRequest, opts ...grpc.CallOption) (*ConversationStarterResponse, error) {
	out := new(ConversationStarterResponse)
	err := c.cc.Invoke(ctx, "/ava.ConversationStarterService/GetConversationStarter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConversationStarterServiceServer is the server API for ConversationStarterService service.
// All implementations must embed UnimplementedConversationStarterServiceServer
// for forward compatibility
type ConversationStarterServiceServer interface {
	GetConversationStarter(context.Context, *ConversationStarterRequest) (*ConversationStarterResponse, error)
	mustEmbedUnimplementedConversationStarterServiceServer()
}

// UnimplementedConversationStarterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConversationStarterServiceServer struct {
}

func (UnimplementedConversationStarterServiceServer) GetConversationStarter(context.Context, *ConversationStarterRequest) (*ConversationStarterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversationStarter not implemented")
}
func (UnimplementedConversationStarterServiceServer) mustEmbedUnimplementedConversationStarterServiceServer() {
}

// UnsafeConversationStarterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConversationStarterServiceServer will
// result in compilation errors.
type UnsafeConversationStarterServiceServer interface {
	mustEmbedUnimplementedConversationStarterServiceServer()
}

func RegisterConversationStarterServiceServer(s grpc.ServiceRegistrar, srv ConversationStarterServiceServer) {
	s.RegisterService(&ConversationStarterService_ServiceDesc, srv)
}

func _ConversationStarterService_GetConversationStarter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationStarterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationStarterServiceServer).GetConversationStarter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ava.ConversationStarterService/GetConversationStarter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationStarterServiceServer).GetConversationStarter(ctx, req.(*ConversationStarterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConversationStarterService_ServiceDesc is the grpc.ServiceDesc for ConversationStarterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConversationStarterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ava.ConversationStarterService",
	HandlerType: (*ConversationStarterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConversationStarter",
			Handler:    _ConversationStarterService_GetConversationStarter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ava/v1/api.proto",
}
